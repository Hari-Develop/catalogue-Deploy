pipeline {

    agent {
        node {
            label 'Jenkins_agent'
        } 
    }
    options {
        timeout(time: 1 , unit: "HOURS")
        disableConcurrentBuilds()
        ansiColor('xterm')
        }
    parameters {
        string(name: 'packageVersion' , defaultValue: '' , description: 'what is artifact version')
        string(name: 'environment' , defaultValue: '' , description: 'what is the environment')
    }
    stages {
        stage("Getting the version of the file") {
            steps {
                sh """
                    echo "version: ${params.version}" 
                    echo "environment: ${params.environment}"  
                """
            }
        }
        stage('terraform init') {
            steps {
                // Add terraform init steps here
                sh """
                    cd terraform
                    terraform init --backend-config=${params.environment}/backend.tf -reconfigure 
                    """ 
            }
        }
        stage('terraform plan') {
            steps {
                // Add terraform plan steps here
                sh """
                    cd terraform
                    terraform plan -var-file="${params.environment}"/"${params.environment}".tfvars -var="app_version=${params.packageVersion}"
                    """ 
            }
        }
        stage('Deploy') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
                submitter "alice,bob"
            }
            steps {
                sh """
                    terraform apply -var-file="${params.environment}"/"${params.environment}".tfvars -var="app_version=${params.packageVersion}" -auto-approve
                """
            }
        }
        stage('release') {
            steps {
                // Add release steps here
                sh 'echo "releasing the application..."'
            }
        }
        
    }
    post {
        always {
            echo "pipeline is running...."
            deleteDir()
        }
        failure {
            echo "pipeline is failure..."
        }
        success {
            echo "pipeline is success...party..ledha..pushpa.."
        }
    }

}
