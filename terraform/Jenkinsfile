pipeline {

    agent {
        node {
            label 'Jenkins_agent'
        } 
    }
    // environment {
    //     // using the environment variables here
    //     PackageVersion = ''
    //     nexusURL = '172.31.32.58:8081/repository'
    // }

    options {
        timeout(time: 1 , unit: "HOURS")
        disableConcurrentBuilds()
        ansiColor('xterm')
        }
    
    parameters {
        string(name: 'version' , defaultValue: '' , description: 'what is artifact version')
        string(name: 'environment' , defaultValue: '' , description: 'what is the environment')
    }
    stages {
        stage("Getting the version of the file") {
            steps {
                sh """
                    echo "version: ${params.version}" 
                    echo "environment: ${params.environment}"  

                """
            }
        }
        stage('terraform init') {
            steps {
                // Add terraform init steps here
                sh """
                    cd terraform
                    terraform init --backend-config=${params.environment}/backend.tf -reconfigure 
                    """ 
            }
        }
        stage('terraform plan') {
            steps {
                // Add terraform plan steps here
                sh """
                    cd terraform
                    terraform plan -var-file=${params.environment}/${params.environment}.tfvars -var="app_version=${params.version}"
                    """ 
            }
        }
        stage('punshing the arifactory into nexus') {
            steps {
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${nexusURL}",
                        groupId: 'com.roboshop',
                        version: "${PackageVersion}",
                        repository: 'catalogue',
                        credentialsId: 'nexus-cred',
                        artifacts: [
                            [artifactId: 'catalogue',
                            classifier: '',
                            file: 'catalogue.zip',
                            type: 'zip']
                        ]
                    )
            }
        }
        stage('Deploy') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
                submitter "alice,bob"
            }
            steps {
                // Add deploy steps here
                sh 'echo "Deploying..."'
            }
        }
        stage('release') {
            steps {
                // Add release steps here
                sh 'echo "releasing the application..."'
            }
        }
        
    }
    post {
        always {
            echo "pipeline is running...."
            deleteDir()
        }
        failure {
            echo "pipeline is failure..."
        }
        success {
            echo "pipeline is success...party..ledha..pushpa.."
        }
    }

}
